//creating indexes
PUT /products
{
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 2
  }
}

//deleting indexes
DELETE /pages

// inserting documents
POST /products/_doc
{
  "name":"Coffee Maker",
  "price":64,
  "in_stock":10
}

PUT /products/_doc/100
{
  "name":"Toaster",
  "price":49,
  "in_stock":4
}

//retreiving documents
GET /products/_doc/100

//update  documents -- existing field
POST /products/_update/100
{
  "doc":{
    "in_stock":3
  }
}

//update documents -- add a new field
POST /products/_update/100
{
  "doc":{
    "tags":["electronics"]
  }
}

//scripting elastic api
POST /products/_update/100
{
  "script": {
    // reduce the value od in_stock field by 1
    "source":"ctx._source.in_stock--"
  }
}

//scripting elastic api -- assigning values
POST /products/_update/100
{
  "script": {
    "source":"ctx._source.in_stock=100"
  }
}

//scripting elastic api -- params
POST /products/_update/100
{
  "script": {
    "source":"ctx._source.in_stock-=params.quantity",
    "params": {
      "quantity":4
    }
  }
}

//upsert
POST /products/_update/101
{
  "script":{
    "source":"ctx._source.in_stock++"
  },
  "upsert":{
    "name":"Blender",
    "price":399,
    "in_stock":5
  }
}

//replacing
PUT /products/_doc/101
{
  "name":"Toaster",
  "price":79,
  "in_stock":4
}

//retreiving documents
GET /products/_doc/100
GET /products_new
//deleting documents
DELETE /products/_doc/101

//update by query
POST /products/_update_by_query
{
  "script": {
    "source": "ctx._source.in_stock--"
  },
  "query": {
    "match_all":{}
  }
}

//get all docs
GET /products-new/_search
{
  "query":{
    "match_all": {}
  
  }
}

//delete by query
POST /productsn/_delete_by_query
{
  "query":{
    "match_all":{
      
    }
  }
}

//index will not fail if document already exists, it will be replaced
//create will fail if document already exists
POST /_bulk
{"index":{"_index":"products","_id":200}}
{"name":"Espresso Machine","price":199,"in_stock":5}
{"create":{"_index":"products","_id":201}}
{"name":"Milk Frother","price":149,"in_stock":14}


//update doc with id 201 and delete the document with id 200 using batch processing
POST /products/_bulk
{"update":{"_id":201}}
{"doc":{"price":129}}
{"delete":{"_id":200}}

//
GET /products/_search
{
  "query":{
    "match_all": {}
  
  }
}


//////////////////////////////////////////////////////////
//Section 4
/*/////////////////////////////////////////////////////*/
POST /_analyze
{
  "text":"2 guys walk into a bar, but the third... Ducks! :-)",
  "analyzer":"standard"
}


POST /_analyze
{
  "text":"2 guys walk into a bar, but the third... Ducks! :-)",
  "char_filter":[],
  "tokenizer":"standard",
  "filter":["lowercase"]
}

//Adding explicit mappings
PUT /reviews
{
  "mappings":{
    "properties":{
      "rating":{"type":"float"},
      "content":{"type":"text"},
      "product_id":{"type":"integer"},
      "author":{
        "properties":{
          "first_name":{"type":"text"},
          "last_name":{"type":"text"},
          "email":{"type":"keyword"}
        }
      }
    }
  }
}

//Create Document using the mapping
PUT /reviews/_doc/1
{
  "rating":5.0,
  "content":"Outstanding course",
  "product_id":123,
  "author":{
    "first_name":"John",
    "last_name":"Doe",
    "email":"johndoe123@example.com"
  }
}

// retrieve mappings for entire index
GET /reviews/_mapping

// retrieve mappings for entire index
GET /reviews/_mapping/field/content


GET /reviews/_mapping/field/author.email

PUT /reviews/_mapping
{
  "properties":{
    "created_at":{
      "type":"date"
    }
  }
}
//string date
PUT /reviews/_doc/2
{
  "rating":4.5,
  "content":"Not Bad",
  "product_id":123,
  "created_at":"2015-03-27",
  "author":{
    "first_name":"Average",
    "last_name":"Joe",
    "email":"avgjoe@example.com"
  }
}
//utc time 
PUT /reviews/_doc/3
{
  "rating":3.5,
  "content":"Could be better",
  "product_id":123,
  "created_at":"2015-04-15T19:29:32Z",
  "author":{
    "first_name":"Spencer",
    "last_name":"Pearson",
    "email":"spearson@example.com"
  }
}

//utc time --with 1 hour offset 
PUT /reviews/_doc/4
{
  "rating":5.0,
  "content":"Incredible",
  "product_id":123,
  "created_at":"2015-01-28T19:30:03+01:00",
  "author":{
    "first_name":"Adam",
    "last_name":"Jones",
    "email":"adam.jones@example.com"
  }
}

//timestamp in milliseconds --
PUT /reviews/_doc/5
{
  "rating":4.5,
  "content":"Very Useful",
  "product_id":123,
  "created_at":"1705692828",
  "author":{
    "first_name":"Taylor",
    "last_name":"West",
    "email":"twest@example.com"
  }
}

//Get reviews
GET /reviews/_search
{
  "query":{
    "match_all": {}
  }
}

