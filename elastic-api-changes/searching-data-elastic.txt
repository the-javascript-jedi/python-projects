// upload the products-bulk.json manually in kibana web browser
// get all data
GET /products/_search
{
  "query": {
    "match_all":{}
  }
}

//search term query
// text search is case sensitive in term query -- shorthand
GET /products/_search
{
  "query": {
    "term":{
      "tags":"Vegetable"
    }
  }
}

// text search is case sensitive in term query --explicit
// but in new versions of elastic api we can use exlicit version with case_insensitive flag
GET /products/_search
{
  "query": {
    "term":{
      "tags":{
        "value":"vegetable",
        "case_insensitive":true
      }
    }
  }
}

//boolean search
GET /products/_search
{
  "query": {
    "term":{
      "is_active":true
    }
  }
}

//number search
GET /products/_search
{
  "query": {
    "term":{
      "in_stock":1
    }
  }
}

//timestamps
GET /products/_search
{
  "query": {
    "term":{
      "created":"2010/07/10"
    }
  }
}

// search multiple tags
// this will below seach tags in an or condition
// returning items with (soup || meat )
// when we provide array of values we need to specify
// terms instead of term
GET /products/_search
{
  "query": {
    "terms":{
      "tags":["Soup","meat"]
    }
  }
}

//Retrieving documents by IDs
GET /products/_search
{
  "query": {
    "ids":{
      "values":["gf5mPI0BZa5H72dXPYNo","g_5mPI0BZa5H72dXPYNo","hf5mPI0BZa5H72dXPYNo"]
    }
  }
}
//Basic usage
//Range search
GET /products/_search
{
  "query": {
    "range": {
      "in_stock": {
        "gte": 2,
        "lte": 5
      }
    }
  }
}

GET /products/_search
{
  "query": {
    "range": {
      "in_stock": {
        "gt": 1,
        "lt": 5
      }
    }
  }
}

//Querying dates
GET /products/_search
{
  "query": {
    "range": {
      "created": {
        "gte": "2015/01/01",
        "lte": "2015/01/31"
      }
    }
  }
}

//Specifying the time
GET /products/_search
{
  "query": {
    "range": {
      "created": {
        "gte": "2015/01/01 00:00:00",
        "lte": "2015/01/31 23:59:59"
      }
    }
  }
}

//Specifying a UTC offset
GET /products/_search
{
  "query": {
    "range": {
      "created": {
        "time_zone": "+01:00",
        "gte": "2020/01/01 01:00:00",
        "lte": "2020/02/01 00:59:59"
      }
    }
  }
}
//Specifying a date format
GET /products/_search
{
  "query": {
    "range": {
      "created": {
        "format": "dd/MM/yyyy",
        "gte": "01/01/2020",
        "lte": "31/01/2020"
      }
    }
  }
}
//wildcard
GET /products/_search
{
  "query": {
    "prefix": {
      "name": {
        "value": "Wine",
        "case_insensitive":true
      }
    }
  }
}

//Single character wildcard (?)
GET /products/_search
{
  "query": {
    "wildcard": {
      "tags": {
        "value": "Past?"
      }
    }
  }
}

//Zero or more characters wildcard (*)
GET /products/_search
{
  "query": {
    "wildcard": {
      "tags": {
        "value": "Bee*"
      }
    }
  }
}

//Regexp
GET /products/_search
{
  "query": {
    "regexp": {
      "tags": {
        "value": "Bee(f|r)+"
      }
    }
  }
}

//Case insensitive searches
//All of the above queries can be made case insensitive by adding the case_insensitive parameter, e.g.:

GET /products/_search
{
  "query": {
    "prefix": {
      "name": {
        "value": "Past",
        "case_insensitive": true
      }
    }
  }
}

//Querying by field existence
GET /products/_search
{
  "query": {
    "exists": {
      "field": "tags"
    }
  }
}

//Inverting the query
//There is no dedicated query for this, so we do it with the bool query.

GET /products/_search
{
  "query": {
    "bool": {
      "must_not": [
        {
          "exists": {
            "field": "tags"
          }
        }
      ]
    }
  }
}

GET /products/_search
{
  "query": {
    "wildcard": {
      "tags": {
        "value": "Past?"
      }
    }
  }
}

//full text query -- match
GET /products/_search
{
  "query": {
    "match": {
      "name": "PaStA"
    }
  }
}

//Searching for multiple terms
GET /products/_search
{
  "query": {
    "match": {
      "name": "PASTA CHICKEN"
    }
  }
}

//Specifying the operator
//Defaults to or. The below makes both terms required.

GET /products/_search
{
  "query": {
    "match": {
      "name": {
        "query": "pasta chicken",
        "operator": "and"
      }
    }
  }
}

//Searching multiple fields
//Basic usage

GET /products/_search
{
  "query": {
    "multi_match": {
      "query": "Beets",
      "fields": ["name", "tags"]
    }
  }
}

//Per-field relevance boosting
GET /products/_search
{
  "query": {
    "multi_match": {
      "query": "Beets",
      "fields": ["name^2", "tags"]
    }
  }
}

//Specifying a tie breaker
GET /products/_search
{
  "query": {
    "multi_match": {
      "query": "vegetable broth",
      "fields": ["name", "description"]
      //"tie_breaker": 0.3
    }
  }
}

